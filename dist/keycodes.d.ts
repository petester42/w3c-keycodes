/** THIS FILE IS AUTOGENERATED **/
export declare class AlphanumericWritingSystemKeys {
    /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards */
    static readonly Backquote: string;
    /** Used for both the US \| (on the 101-key layout) and also for the key located between the " and Enter keys on row C of the 102-,  104- and 106-key layouts.  Labelled #~ on a UK (102) keyboard. */
    static readonly Backslash: string;
    /** Backspace or ⌫. Labelled Delete on Apple keyboards. */
    static readonly Backspace: string;
    /** [{ on a US keyboard. */
    static readonly BracketLeft: string;
    /** ]} on a US keyboard. */
    static readonly BracketRight: string;
    /** ,< on a US keyboard. */
    static readonly Comma: string;
    /** 0) on a US keyboard. */
    static readonly Digit0: string;
    /** 1! on a US keyboard. */
    static readonly Digit1: string;
    /** 2@ on a US keyboard. */
    static readonly Digit2: string;
    /** 3# on a US keyboard. */
    static readonly Digit3: string;
    /** 4$ on a US keyboard. */
    static readonly Digit4: string;
    /** 5% on a US keyboard. */
    static readonly Digit5: string;
    /** 6^ on a US keyboard. */
    static readonly Digit6: string;
    /** 7& on a US keyboard. */
    static readonly Digit7: string;
    /** 8* on a US keyboard. */
    static readonly Digit8: string;
    /** 9( on a US keyboard. */
    static readonly Digit9: string;
    /** =+ on a US keyboard. */
    static readonly Equal: string;
    /** Located between the left Shift and Z keys. Labelled \| on a UK keyboard. */
    static readonly IntlBackslash: string;
    /** Located between the / and right Shift keys. Labelled \ろ (ro) on a Japanese keyboard. */
    static readonly IntlRo: string;
    /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \/ on a  Russian keyboard. */
    static readonly IntlYen: string;
    /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */
    static readonly KeyA: string;
    /** b on a US keyboard. */
    static readonly KeyB: string;
    /** c on a US keyboard. */
    static readonly KeyC: string;
    /** d on a US keyboard. */
    static readonly KeyD: string;
    /** e on a US keyboard. */
    static readonly KeyE: string;
    /** f on a US keyboard. */
    static readonly KeyF: string;
    /** g on a US keyboard. */
    static readonly KeyG: string;
    /** h on a US keyboard. */
    static readonly KeyH: string;
    /** i on a US keyboard. */
    static readonly KeyI: string;
    /** j on a US keyboard. */
    static readonly KeyJ: string;
    /** k on a US keyboard. */
    static readonly KeyK: string;
    /** l on a US keyboard. */
    static readonly KeyL: string;
    /** m on a US keyboard. */
    static readonly KeyM: string;
    /** n on a US keyboard. */
    static readonly KeyN: string;
    /** o on a US keyboard. */
    static readonly KeyO: string;
    /** p on a US keyboard. */
    static readonly KeyP: string;
    /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */
    static readonly KeyQ: string;
    /** r on a US keyboard. */
    static readonly KeyR: string;
    /** s on a US keyboard. */
    static readonly KeyS: string;
    /** t on a US keyboard. */
    static readonly KeyT: string;
    /** u on a US keyboard. */
    static readonly KeyU: string;
    /** v on a US keyboard. */
    static readonly KeyV: string;
    /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */
    static readonly KeyW: string;
    /** x on a US keyboard. */
    static readonly KeyX: string;
    /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */
    static readonly KeyY: string;
    /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a  QWERTZ (e.g., German) keyboard. */
    static readonly KeyZ: string;
    /** -_ on a US keyboard. */
    static readonly Minus: string;
    /** .> on a US keyboard. */
    static readonly Period: string;
    /** '" on a US keyboard. */
    static readonly Quote: string;
    /** ;: on a US keyboard. */
    static readonly Semicolon: string;
    /** /? on a US keyboard. */
    static readonly Slash: string;
    static values(): string[];
    static contains(key: string): boolean;
}
export declare class AlphanumericFunctionalKeys {
    /** Alt, Option or ⌥. */
    static readonly AltLeft: string;
    /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */
    static readonly AltRight: string;
    /** CapsLock or ⇪ */
    static readonly CapsLock: string;
    /** The application context menu key, which is typically found between the right Meta key and the right Control key. */
    static readonly ContextMenu: string;
    /** Control or ⌃ */
    static readonly ControlLeft: string;
    /** Control or ⌃ */
    static readonly ControlRight: string;
    /** Enter or ↵. Labelled Return on Apple keyboards. */
    static readonly Enter: string;
    /** The Windows, ⌘, Command or other OS symbol key. */
    static readonly MetaLeft: string;
    /** The Windows, ⌘, Command or other OS symbol key. */
    static readonly MetaRight: string;
    /** Shift or ⇧ */
    static readonly ShiftLeft: string;
    /** Shift or ⇧ */
    static readonly ShiftRight: string;
    /** (space) */
    static readonly Space: string;
    /** Tab or ⇥ */
    static readonly Tab: string;
    static values(): string[];
    static contains(key: string): boolean;
}
export declare class ControlPadKeys {
    /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of  the keyboard should be encoded as "Backspace". */
    static readonly Delete: string;
    /** Page Down, End or ↘ */
    static readonly End: string;
    /** Help. Not present on standard PC keyboards. */
    static readonly Help: string;
    /** Home or ↖ */
    static readonly Home: string;
    /** Insert or Ins. Not present on Apple keyboards. */
    static readonly Insert: string;
    /** Page Down, PgDn or ⇟ */
    static readonly PageDown: string;
    /** Page Up, PgUp or ⇞ */
    static readonly PageUp: string;
    static values(): string[];
    static contains(key: string): boolean;
}
export declare class ArrowPadKeys {
    /** ↓ */
    static readonly ArrowDown: string;
    /** ← */
    static readonly ArrowLeft: string;
    /** → */
    static readonly ArrowRight: string;
    /** ↑ */
    static readonly ArrowUp: string;
    static values(): string[];
    static contains(key: string): boolean;
}
export declare class NumPadKeys {
    /** On the Mac, the "NumLock" code should be used for the numpad Clear key. */
    static readonly NumLock: string;
    /** 0 Ins on a keyboard0 on a phone or remote control */
    static readonly Numpad0: string;
    /** 1 End on a keyboard1 or 1 QZ on a phone or remote control */
    static readonly Numpad1: string;
    /** 2 ↓ on a keyboard2 ABC on a phone or remote control */
    static readonly Numpad2: string;
    /** 3 PgDn on a keyboard3 DEF on a phone or remote control */
    static readonly Numpad3: string;
    /** 4 ← on a keyboard4 GHI on a phone or remote control */
    static readonly Numpad4: string;
    /** 5 on a keyboard5 JKL on a phone or remote control */
    static readonly Numpad5: string;
    /** 6 → on a keyboard6 MNO on a phone or remote control */
    static readonly Numpad6: string;
    /** 7 Home on a keyboard7 PQRS or 7 PRS on a phone or remote control */
    static readonly Numpad7: string;
    /** 8 ↑ on a keyboard8 TUV on a phone or remote control */
    static readonly Numpad8: string;
    /** 9 PgUp on a keyboard9 WXYZ or 9 WXY on a phone or remote control */
    static readonly Numpad9: string;
    /** + */
    static readonly NumpadAdd: string;
    /** Found on the Microsoft Natural Keyboard. */
    static readonly NumpadBackspace: string;
    /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always  be encoded as "NumLock". */
    static readonly NumpadClear: string;
    /** CE (Clear Entry) */
    static readonly NumpadClearEntry: string;
    /** , (thousands separator). For locales where the thousands separator is a "." (e.g., Brazil), this key may generate a .. */
    static readonly NumpadComma: string;
    /** . Del. For locales where the decimal separator is "," (e.g., Brazil), this key may generate a ,. */
    static readonly NumpadDecimal: string;
    /** / */
    static readonly NumpadDivide: string;
    /**  */
    static readonly NumpadEnter: string;
    /** = */
    static readonly NumpadEqual: string;
    /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */
    static readonly NumpadHash: string;
    /** M+ Add current entry to the value stored in memory. */
    static readonly NumpadMemoryAdd: string;
    /** MC Clear the value stored in memory. */
    static readonly NumpadMemoryClear: string;
    /** MR Replace the current entry with the value stored in memory. */
    static readonly NumpadMemoryRecall: string;
    /** MS Replace the value stored in memory with the current entry. */
    static readonly NumpadMemoryStore: string;
    /** M- Subtract current entry from the value stored in memory. */
    static readonly NumpadMemorySubtract: string;
    /** * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).Use "NumpadStar" for the * key on phones and remote controls. */
    static readonly NumpadMultiply: string;
    /** ( Found on the Microsoft Natural Keyboard. */
    static readonly NumpadParenLeft: string;
    /** ) Found on the Microsoft Natural Keyboard. */
    static readonly NumpadParenRight: string;
    /** * on a phone or remote control device. This key is typically found below the 7 key and to the left of  the 0 key.Use "NumpadMultiply" for the * key on  numeric keypads. */
    static readonly NumpadStar: string;
    /** - */
    static readonly NumpadSubtract: string;
    static values(): string[];
    static contains(key: string): boolean;
}
export declare class FunctionKeys {
    /** Esc or ⎋ */
    static readonly Escape: string;
    /** F1 */
    static readonly F1: string;
    /** F2 */
    static readonly F2: string;
    /** F3 */
    static readonly F3: string;
    /** F4 */
    static readonly F4: string;
    /** F5 */
    static readonly F5: string;
    /** F6 */
    static readonly F6: string;
    /** F7 */
    static readonly F7: string;
    /** F8 */
    static readonly F8: string;
    /** F9 */
    static readonly F9: string;
    /** F10 */
    static readonly F10: string;
    /** F11 */
    static readonly F11: string;
    /** F12 */
    static readonly F12: string;
    /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is  included here to keep it with related keys. */
    static readonly Fn: string;
    /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */
    static readonly FnLock: string;
    /** PrtScr SysRq or Print Screen */
    static readonly PrintScreen: string;
    /** Scroll Lock */
    static readonly ScrollLock: string;
    /** Pause Break */
    static readonly Pause: string;
    static values(): string[];
    static contains(key: string): boolean;
}
export declare class MediaKeys {
    /** Some laptops place this key to the left of the ↑ key. */
    static readonly BrowserBack: string;
    /**  */
    static readonly BrowserFavorites: string;
    /** Some laptops place this key to the right of the ↑ key. */
    static readonly BrowserForward: string;
    /**  */
    static readonly BrowserHome: string;
    /**  */
    static readonly BrowserRefresh: string;
    /**  */
    static readonly BrowserSearch: string;
    /**  */
    static readonly BrowserStop: string;
    /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */
    static readonly Eject: string;
    /** Sometimes labelled My Computer on the keyboard */
    static readonly LaunchApp1: string;
    /** Sometimes labelled Calculator on the keyboard */
    static readonly LaunchApp2: string;
    /**  */
    static readonly LaunchMail: string;
    /**  */
    static readonly MediaPlayPause: string;
    /**  */
    static readonly MediaSelect: string;
    /**  */
    static readonly MediaStop: string;
    /**  */
    static readonly MediaTrackNext: string;
    /**  */
    static readonly MediaTrackPrevious: string;
    /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */
    static readonly Power: string;
    /**  */
    static readonly Sleep: string;
    /**  */
    static readonly AudioVolumeDown: string;
    /**  */
    static readonly AudioVolumeMute: string;
    /**  */
    static readonly AudioVolumeUp: string;
    /**  */
    static readonly WakeUp: string;
    static values(): string[];
    static contains(key: string): boolean;
}
