"use strict";
/** THIS FILE IS AUTOGENERATED **/
Object.defineProperty(exports, "__esModule", { value: true });
var AlphanumericWritingSystemKeys = /** @class */ (function () {
    function AlphanumericWritingSystemKeys() {
    }
    Object.defineProperty(AlphanumericWritingSystemKeys, "Backquote", {
        /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards */
        get: function () {
            return "Backquote";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Backslash", {
        /** Used for both the US \| (on the 101-key layout) and also for the key located between the " and Enter keys on row C of the 102-,  104- and 106-key layouts.  Labelled #~ on a UK (102) keyboard. */
        get: function () {
            return "Backslash";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Backspace", {
        /** Backspace or ⌫. Labelled Delete on Apple keyboards. */
        get: function () {
            return "Backspace";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "BracketLeft", {
        /** [{ on a US keyboard. */
        get: function () {
            return "BracketLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "BracketRight", {
        /** ]} on a US keyboard. */
        get: function () {
            return "BracketRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Comma", {
        /** ,< on a US keyboard. */
        get: function () {
            return "Comma";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit0", {
        /** 0) on a US keyboard. */
        get: function () {
            return "Digit0";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit1", {
        /** 1! on a US keyboard. */
        get: function () {
            return "Digit1";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit2", {
        /** 2@ on a US keyboard. */
        get: function () {
            return "Digit2";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit3", {
        /** 3# on a US keyboard. */
        get: function () {
            return "Digit3";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit4", {
        /** 4$ on a US keyboard. */
        get: function () {
            return "Digit4";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit5", {
        /** 5% on a US keyboard. */
        get: function () {
            return "Digit5";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit6", {
        /** 6^ on a US keyboard. */
        get: function () {
            return "Digit6";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit7", {
        /** 7& on a US keyboard. */
        get: function () {
            return "Digit7";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit8", {
        /** 8* on a US keyboard. */
        get: function () {
            return "Digit8";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Digit9", {
        /** 9( on a US keyboard. */
        get: function () {
            return "Digit9";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Equal", {
        /** =+ on a US keyboard. */
        get: function () {
            return "Equal";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "IntlBackslash", {
        /** Located between the left Shift and Z keys. Labelled \| on a UK keyboard. */
        get: function () {
            return "IntlBackslash";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "IntlRo", {
        /** Located between the / and right Shift keys. Labelled \ろ (ro) on a Japanese keyboard. */
        get: function () {
            return "IntlRo";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "IntlYen", {
        /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \/ on a  Russian keyboard. */
        get: function () {
            return "IntlYen";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyA", {
        /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */
        get: function () {
            return "KeyA";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyB", {
        /** b on a US keyboard. */
        get: function () {
            return "KeyB";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyC", {
        /** c on a US keyboard. */
        get: function () {
            return "KeyC";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyD", {
        /** d on a US keyboard. */
        get: function () {
            return "KeyD";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyE", {
        /** e on a US keyboard. */
        get: function () {
            return "KeyE";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyF", {
        /** f on a US keyboard. */
        get: function () {
            return "KeyF";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyG", {
        /** g on a US keyboard. */
        get: function () {
            return "KeyG";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyH", {
        /** h on a US keyboard. */
        get: function () {
            return "KeyH";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyI", {
        /** i on a US keyboard. */
        get: function () {
            return "KeyI";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyJ", {
        /** j on a US keyboard. */
        get: function () {
            return "KeyJ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyK", {
        /** k on a US keyboard. */
        get: function () {
            return "KeyK";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyL", {
        /** l on a US keyboard. */
        get: function () {
            return "KeyL";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyM", {
        /** m on a US keyboard. */
        get: function () {
            return "KeyM";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyN", {
        /** n on a US keyboard. */
        get: function () {
            return "KeyN";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyO", {
        /** o on a US keyboard. */
        get: function () {
            return "KeyO";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyP", {
        /** p on a US keyboard. */
        get: function () {
            return "KeyP";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyQ", {
        /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */
        get: function () {
            return "KeyQ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyR", {
        /** r on a US keyboard. */
        get: function () {
            return "KeyR";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyS", {
        /** s on a US keyboard. */
        get: function () {
            return "KeyS";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyT", {
        /** t on a US keyboard. */
        get: function () {
            return "KeyT";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyU", {
        /** u on a US keyboard. */
        get: function () {
            return "KeyU";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyV", {
        /** v on a US keyboard. */
        get: function () {
            return "KeyV";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyW", {
        /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */
        get: function () {
            return "KeyW";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyX", {
        /** x on a US keyboard. */
        get: function () {
            return "KeyX";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyY", {
        /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */
        get: function () {
            return "KeyY";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "KeyZ", {
        /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a  QWERTZ (e.g., German) keyboard. */
        get: function () {
            return "KeyZ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Minus", {
        /** -_ on a US keyboard. */
        get: function () {
            return "Minus";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Period", {
        /** .> on a US keyboard. */
        get: function () {
            return "Period";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Quote", {
        /** '" on a US keyboard. */
        get: function () {
            return "Quote";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Semicolon", {
        /** ;: on a US keyboard. */
        get: function () {
            return "Semicolon";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericWritingSystemKeys, "Slash", {
        /** /? on a US keyboard. */
        get: function () {
            return "Slash";
        },
        enumerable: true,
        configurable: true
    });
    AlphanumericWritingSystemKeys.values = function () {
        return [
            "Backquote",
            "Backslash",
            "Backspace",
            "BracketLeft",
            "BracketRight",
            "Comma",
            "Digit0",
            "Digit1",
            "Digit2",
            "Digit3",
            "Digit4",
            "Digit5",
            "Digit6",
            "Digit7",
            "Digit8",
            "Digit9",
            "Equal",
            "IntlBackslash",
            "IntlRo",
            "IntlYen",
            "KeyA",
            "KeyB",
            "KeyC",
            "KeyD",
            "KeyE",
            "KeyF",
            "KeyG",
            "KeyH",
            "KeyI",
            "KeyJ",
            "KeyK",
            "KeyL",
            "KeyM",
            "KeyN",
            "KeyO",
            "KeyP",
            "KeyQ",
            "KeyR",
            "KeyS",
            "KeyT",
            "KeyU",
            "KeyV",
            "KeyW",
            "KeyX",
            "KeyY",
            "KeyZ",
            "Minus",
            "Period",
            "Quote",
            "Semicolon",
            "Slash"
        ];
    };
    AlphanumericWritingSystemKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return AlphanumericWritingSystemKeys;
}());
exports.AlphanumericWritingSystemKeys = AlphanumericWritingSystemKeys;
var AlphanumericFunctionalKeys = /** @class */ (function () {
    function AlphanumericFunctionalKeys() {
    }
    Object.defineProperty(AlphanumericFunctionalKeys, "AltLeft", {
        /** Alt, Option or ⌥. */
        get: function () {
            return "AltLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "AltRight", {
        /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */
        get: function () {
            return "AltRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "CapsLock", {
        /** CapsLock or ⇪ */
        get: function () {
            return "CapsLock";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "ContextMenu", {
        /** The application context menu key, which is typically found between the right Meta key and the right Control key. */
        get: function () {
            return "ContextMenu";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "ControlLeft", {
        /** Control or ⌃ */
        get: function () {
            return "ControlLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "ControlRight", {
        /** Control or ⌃ */
        get: function () {
            return "ControlRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "Enter", {
        /** Enter or ↵. Labelled Return on Apple keyboards. */
        get: function () {
            return "Enter";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "MetaLeft", {
        /** The Windows, ⌘, Command or other OS symbol key. */
        get: function () {
            return "MetaLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "MetaRight", {
        /** The Windows, ⌘, Command or other OS symbol key. */
        get: function () {
            return "MetaRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "ShiftLeft", {
        /** Shift or ⇧ */
        get: function () {
            return "ShiftLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "ShiftRight", {
        /** Shift or ⇧ */
        get: function () {
            return "ShiftRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "Space", {
        /** (space) */
        get: function () {
            return "Space";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlphanumericFunctionalKeys, "Tab", {
        /** Tab or ⇥ */
        get: function () {
            return "Tab";
        },
        enumerable: true,
        configurable: true
    });
    AlphanumericFunctionalKeys.values = function () {
        return [
            "AltLeft",
            "AltRight",
            "CapsLock",
            "ContextMenu",
            "ControlLeft",
            "ControlRight",
            "Enter",
            "MetaLeft",
            "MetaRight",
            "ShiftLeft",
            "ShiftRight",
            "Space",
            "Tab"
        ];
    };
    AlphanumericFunctionalKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return AlphanumericFunctionalKeys;
}());
exports.AlphanumericFunctionalKeys = AlphanumericFunctionalKeys;
var ControlPadKeys = /** @class */ (function () {
    function ControlPadKeys() {
    }
    Object.defineProperty(ControlPadKeys, "Delete", {
        /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of  the keyboard should be encoded as "Backspace". */
        get: function () {
            return "Delete";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlPadKeys, "End", {
        /** Page Down, End or ↘ */
        get: function () {
            return "End";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlPadKeys, "Help", {
        /** Help. Not present on standard PC keyboards. */
        get: function () {
            return "Help";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlPadKeys, "Home", {
        /** Home or ↖ */
        get: function () {
            return "Home";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlPadKeys, "Insert", {
        /** Insert or Ins. Not present on Apple keyboards. */
        get: function () {
            return "Insert";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlPadKeys, "PageDown", {
        /** Page Down, PgDn or ⇟ */
        get: function () {
            return "PageDown";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlPadKeys, "PageUp", {
        /** Page Up, PgUp or ⇞ */
        get: function () {
            return "PageUp";
        },
        enumerable: true,
        configurable: true
    });
    ControlPadKeys.values = function () {
        return ["Delete", "End", "Help", "Home", "Insert", "PageDown", "PageUp"];
    };
    ControlPadKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return ControlPadKeys;
}());
exports.ControlPadKeys = ControlPadKeys;
var ArrowPadKeys = /** @class */ (function () {
    function ArrowPadKeys() {
    }
    Object.defineProperty(ArrowPadKeys, "ArrowDown", {
        /** ↓ */
        get: function () {
            return "ArrowDown";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrowPadKeys, "ArrowLeft", {
        /** ← */
        get: function () {
            return "ArrowLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrowPadKeys, "ArrowRight", {
        /** → */
        get: function () {
            return "ArrowRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrowPadKeys, "ArrowUp", {
        /** ↑ */
        get: function () {
            return "ArrowUp";
        },
        enumerable: true,
        configurable: true
    });
    ArrowPadKeys.values = function () {
        return ["ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp"];
    };
    ArrowPadKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return ArrowPadKeys;
}());
exports.ArrowPadKeys = ArrowPadKeys;
var NumPadKeys = /** @class */ (function () {
    function NumPadKeys() {
    }
    Object.defineProperty(NumPadKeys, "NumLock", {
        /** On the Mac, the "NumLock" code should be used for the numpad Clear key. */
        get: function () {
            return "NumLock";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad0", {
        /** 0 Ins on a keyboard0 on a phone or remote control */
        get: function () {
            return "Numpad0";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad1", {
        /** 1 End on a keyboard1 or 1 QZ on a phone or remote control */
        get: function () {
            return "Numpad1";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad2", {
        /** 2 ↓ on a keyboard2 ABC on a phone or remote control */
        get: function () {
            return "Numpad2";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad3", {
        /** 3 PgDn on a keyboard3 DEF on a phone or remote control */
        get: function () {
            return "Numpad3";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad4", {
        /** 4 ← on a keyboard4 GHI on a phone or remote control */
        get: function () {
            return "Numpad4";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad5", {
        /** 5 on a keyboard5 JKL on a phone or remote control */
        get: function () {
            return "Numpad5";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad6", {
        /** 6 → on a keyboard6 MNO on a phone or remote control */
        get: function () {
            return "Numpad6";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad7", {
        /** 7 Home on a keyboard7 PQRS or 7 PRS on a phone or remote control */
        get: function () {
            return "Numpad7";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad8", {
        /** 8 ↑ on a keyboard8 TUV on a phone or remote control */
        get: function () {
            return "Numpad8";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "Numpad9", {
        /** 9 PgUp on a keyboard9 WXYZ or 9 WXY on a phone or remote control */
        get: function () {
            return "Numpad9";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadAdd", {
        /** + */
        get: function () {
            return "NumpadAdd";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadBackspace", {
        /** Found on the Microsoft Natural Keyboard. */
        get: function () {
            return "NumpadBackspace";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadClear", {
        /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always  be encoded as "NumLock". */
        get: function () {
            return "NumpadClear";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadClearEntry", {
        /** CE (Clear Entry) */
        get: function () {
            return "NumpadClearEntry";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadComma", {
        /** , (thousands separator). For locales where the thousands separator is a "." (e.g., Brazil), this key may generate a .. */
        get: function () {
            return "NumpadComma";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadDecimal", {
        /** . Del. For locales where the decimal separator is "," (e.g., Brazil), this key may generate a ,. */
        get: function () {
            return "NumpadDecimal";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadDivide", {
        /** / */
        get: function () {
            return "NumpadDivide";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadEnter", {
        /**  */
        get: function () {
            return "NumpadEnter";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadEqual", {
        /** = */
        get: function () {
            return "NumpadEqual";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadHash", {
        /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */
        get: function () {
            return "NumpadHash";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadMemoryAdd", {
        /** M+ Add current entry to the value stored in memory. */
        get: function () {
            return "NumpadMemoryAdd";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadMemoryClear", {
        /** MC Clear the value stored in memory. */
        get: function () {
            return "NumpadMemoryClear";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadMemoryRecall", {
        /** MR Replace the current entry with the value stored in memory. */
        get: function () {
            return "NumpadMemoryRecall";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadMemoryStore", {
        /** MS Replace the value stored in memory with the current entry. */
        get: function () {
            return "NumpadMemoryStore";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadMemorySubtract", {
        /** M- Subtract current entry from the value stored in memory. */
        get: function () {
            return "NumpadMemorySubtract";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadMultiply", {
        /** * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).Use "NumpadStar" for the * key on phones and remote controls. */
        get: function () {
            return "NumpadMultiply";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadParenLeft", {
        /** ( Found on the Microsoft Natural Keyboard. */
        get: function () {
            return "NumpadParenLeft";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadParenRight", {
        /** ) Found on the Microsoft Natural Keyboard. */
        get: function () {
            return "NumpadParenRight";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadStar", {
        /** * on a phone or remote control device. This key is typically found below the 7 key and to the left of  the 0 key.Use "NumpadMultiply" for the * key on  numeric keypads. */
        get: function () {
            return "NumpadStar";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumPadKeys, "NumpadSubtract", {
        /** - */
        get: function () {
            return "NumpadSubtract";
        },
        enumerable: true,
        configurable: true
    });
    NumPadKeys.values = function () {
        return [
            "NumLock",
            "Numpad0",
            "Numpad1",
            "Numpad2",
            "Numpad3",
            "Numpad4",
            "Numpad5",
            "Numpad6",
            "Numpad7",
            "Numpad8",
            "Numpad9",
            "NumpadAdd",
            "NumpadBackspace",
            "NumpadClear",
            "NumpadClearEntry",
            "NumpadComma",
            "NumpadDecimal",
            "NumpadDivide",
            "NumpadEnter",
            "NumpadEqual",
            "NumpadHash",
            "NumpadMemoryAdd",
            "NumpadMemoryClear",
            "NumpadMemoryRecall",
            "NumpadMemoryStore",
            "NumpadMemorySubtract",
            "NumpadMultiply",
            "NumpadParenLeft",
            "NumpadParenRight",
            "NumpadStar",
            "NumpadSubtract"
        ];
    };
    NumPadKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return NumPadKeys;
}());
exports.NumPadKeys = NumPadKeys;
var FunctionKeys = /** @class */ (function () {
    function FunctionKeys() {
    }
    Object.defineProperty(FunctionKeys, "Escape", {
        /** Esc or ⎋ */
        get: function () {
            return "Escape";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F1", {
        /** F1 */
        get: function () {
            return "F1";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F2", {
        /** F2 */
        get: function () {
            return "F2";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F3", {
        /** F3 */
        get: function () {
            return "F3";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F4", {
        /** F4 */
        get: function () {
            return "F4";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F5", {
        /** F5 */
        get: function () {
            return "F5";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F6", {
        /** F6 */
        get: function () {
            return "F6";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F7", {
        /** F7 */
        get: function () {
            return "F7";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F8", {
        /** F8 */
        get: function () {
            return "F8";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F9", {
        /** F9 */
        get: function () {
            return "F9";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F10", {
        /** F10 */
        get: function () {
            return "F10";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F11", {
        /** F11 */
        get: function () {
            return "F11";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "F12", {
        /** F12 */
        get: function () {
            return "F12";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "Fn", {
        /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is  included here to keep it with related keys. */
        get: function () {
            return "Fn";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "FnLock", {
        /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */
        get: function () {
            return "FnLock";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "PrintScreen", {
        /** PrtScr SysRq or Print Screen */
        get: function () {
            return "PrintScreen";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "ScrollLock", {
        /** Scroll Lock */
        get: function () {
            return "ScrollLock";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunctionKeys, "Pause", {
        /** Pause Break */
        get: function () {
            return "Pause";
        },
        enumerable: true,
        configurable: true
    });
    FunctionKeys.values = function () {
        return [
            "Escape",
            "F1",
            "F2",
            "F3",
            "F4",
            "F5",
            "F6",
            "F7",
            "F8",
            "F9",
            "F10",
            "F11",
            "F12",
            "Fn",
            "FnLock",
            "PrintScreen",
            "ScrollLock",
            "Pause"
        ];
    };
    FunctionKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return FunctionKeys;
}());
exports.FunctionKeys = FunctionKeys;
var MediaKeys = /** @class */ (function () {
    function MediaKeys() {
    }
    Object.defineProperty(MediaKeys, "BrowserBack", {
        /** Some laptops place this key to the left of the ↑ key. */
        get: function () {
            return "BrowserBack";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "BrowserFavorites", {
        /**  */
        get: function () {
            return "BrowserFavorites";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "BrowserForward", {
        /** Some laptops place this key to the right of the ↑ key. */
        get: function () {
            return "BrowserForward";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "BrowserHome", {
        /**  */
        get: function () {
            return "BrowserHome";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "BrowserRefresh", {
        /**  */
        get: function () {
            return "BrowserRefresh";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "BrowserSearch", {
        /**  */
        get: function () {
            return "BrowserSearch";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "BrowserStop", {
        /**  */
        get: function () {
            return "BrowserStop";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "Eject", {
        /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */
        get: function () {
            return "Eject";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "LaunchApp1", {
        /** Sometimes labelled My Computer on the keyboard */
        get: function () {
            return "LaunchApp1";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "LaunchApp2", {
        /** Sometimes labelled Calculator on the keyboard */
        get: function () {
            return "LaunchApp2";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "LaunchMail", {
        /**  */
        get: function () {
            return "LaunchMail";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "MediaPlayPause", {
        /**  */
        get: function () {
            return "MediaPlayPause";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "MediaSelect", {
        /**  */
        get: function () {
            return "MediaSelect";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "MediaStop", {
        /**  */
        get: function () {
            return "MediaStop";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "MediaTrackNext", {
        /**  */
        get: function () {
            return "MediaTrackNext";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "MediaTrackPrevious", {
        /**  */
        get: function () {
            return "MediaTrackPrevious";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "Power", {
        /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */
        get: function () {
            return "Power";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "Sleep", {
        /**  */
        get: function () {
            return "Sleep";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "AudioVolumeDown", {
        /**  */
        get: function () {
            return "AudioVolumeDown";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "AudioVolumeMute", {
        /**  */
        get: function () {
            return "AudioVolumeMute";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "AudioVolumeUp", {
        /**  */
        get: function () {
            return "AudioVolumeUp";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaKeys, "WakeUp", {
        /**  */
        get: function () {
            return "WakeUp";
        },
        enumerable: true,
        configurable: true
    });
    MediaKeys.values = function () {
        return [
            "BrowserBack",
            "BrowserFavorites",
            "BrowserForward",
            "BrowserHome",
            "BrowserRefresh",
            "BrowserSearch",
            "BrowserStop",
            "Eject",
            "LaunchApp1",
            "LaunchApp2",
            "LaunchMail",
            "MediaPlayPause",
            "MediaSelect",
            "MediaStop",
            "MediaTrackNext",
            "MediaTrackPrevious",
            "Power",
            "Sleep",
            "AudioVolumeDown",
            "AudioVolumeMute",
            "AudioVolumeUp",
            "WakeUp"
        ];
    };
    MediaKeys.contains = function (key) {
        return this.values().includes(key);
    };
    return MediaKeys;
}());
exports.MediaKeys = MediaKeys;
//# sourceMappingURL=keycodes.js.map