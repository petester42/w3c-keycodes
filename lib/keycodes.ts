/** THIS FILE IS AUTOGENERATED **/

export class AlphanumericWritingSystemKeys {
  /** `~ on a US keyboard. This is the 半角/全角/漢字 (hankaku/zenkaku/kanji) key on Japanese keyboards */
  static get Backquote(): string {
    return "Backquote";
  }

  /** Used for both the US \| (on the 101-key layout) and also for the key located between the " and Enter keys on row C of the 102-,  104- and 106-key layouts.  Labelled #~ on a UK (102) keyboard. */
  static get Backslash(): string {
    return "Backslash";
  }

  /** Backspace or ⌫. Labelled Delete on Apple keyboards. */
  static get Backspace(): string {
    return "Backspace";
  }

  /** [{ on a US keyboard. */
  static get BracketLeft(): string {
    return "BracketLeft";
  }

  /** ]} on a US keyboard. */
  static get BracketRight(): string {
    return "BracketRight";
  }

  /** ,< on a US keyboard. */
  static get Comma(): string {
    return "Comma";
  }

  /** 0) on a US keyboard. */
  static get Digit0(): string {
    return "Digit0";
  }

  /** 1! on a US keyboard. */
  static get Digit1(): string {
    return "Digit1";
  }

  /** 2@ on a US keyboard. */
  static get Digit2(): string {
    return "Digit2";
  }

  /** 3# on a US keyboard. */
  static get Digit3(): string {
    return "Digit3";
  }

  /** 4$ on a US keyboard. */
  static get Digit4(): string {
    return "Digit4";
  }

  /** 5% on a US keyboard. */
  static get Digit5(): string {
    return "Digit5";
  }

  /** 6^ on a US keyboard. */
  static get Digit6(): string {
    return "Digit6";
  }

  /** 7& on a US keyboard. */
  static get Digit7(): string {
    return "Digit7";
  }

  /** 8* on a US keyboard. */
  static get Digit8(): string {
    return "Digit8";
  }

  /** 9( on a US keyboard. */
  static get Digit9(): string {
    return "Digit9";
  }

  /** =+ on a US keyboard. */
  static get Equal(): string {
    return "Equal";
  }

  /** Located between the left Shift and Z keys. Labelled \| on a UK keyboard. */
  static get IntlBackslash(): string {
    return "IntlBackslash";
  }

  /** Located between the / and right Shift keys. Labelled \ろ (ro) on a Japanese keyboard. */
  static get IntlRo(): string {
    return "IntlRo";
  }

  /** Located between the = and Backspace keys. Labelled ¥ (yen) on a Japanese keyboard. \/ on a  Russian keyboard. */
  static get IntlYen(): string {
    return "IntlYen";
  }

  /** a on a US keyboard. Labelled q on an AZERTY (e.g., French) keyboard. */
  static get KeyA(): string {
    return "KeyA";
  }

  /** b on a US keyboard. */
  static get KeyB(): string {
    return "KeyB";
  }

  /** c on a US keyboard. */
  static get KeyC(): string {
    return "KeyC";
  }

  /** d on a US keyboard. */
  static get KeyD(): string {
    return "KeyD";
  }

  /** e on a US keyboard. */
  static get KeyE(): string {
    return "KeyE";
  }

  /** f on a US keyboard. */
  static get KeyF(): string {
    return "KeyF";
  }

  /** g on a US keyboard. */
  static get KeyG(): string {
    return "KeyG";
  }

  /** h on a US keyboard. */
  static get KeyH(): string {
    return "KeyH";
  }

  /** i on a US keyboard. */
  static get KeyI(): string {
    return "KeyI";
  }

  /** j on a US keyboard. */
  static get KeyJ(): string {
    return "KeyJ";
  }

  /** k on a US keyboard. */
  static get KeyK(): string {
    return "KeyK";
  }

  /** l on a US keyboard. */
  static get KeyL(): string {
    return "KeyL";
  }

  /** m on a US keyboard. */
  static get KeyM(): string {
    return "KeyM";
  }

  /** n on a US keyboard. */
  static get KeyN(): string {
    return "KeyN";
  }

  /** o on a US keyboard. */
  static get KeyO(): string {
    return "KeyO";
  }

  /** p on a US keyboard. */
  static get KeyP(): string {
    return "KeyP";
  }

  /** q on a US keyboard. Labelled a on an AZERTY (e.g., French) keyboard. */
  static get KeyQ(): string {
    return "KeyQ";
  }

  /** r on a US keyboard. */
  static get KeyR(): string {
    return "KeyR";
  }

  /** s on a US keyboard. */
  static get KeyS(): string {
    return "KeyS";
  }

  /** t on a US keyboard. */
  static get KeyT(): string {
    return "KeyT";
  }

  /** u on a US keyboard. */
  static get KeyU(): string {
    return "KeyU";
  }

  /** v on a US keyboard. */
  static get KeyV(): string {
    return "KeyV";
  }

  /** w on a US keyboard. Labelled z on an AZERTY (e.g., French) keyboard. */
  static get KeyW(): string {
    return "KeyW";
  }

  /** x on a US keyboard. */
  static get KeyX(): string {
    return "KeyX";
  }

  /** y on a US keyboard. Labelled z on a QWERTZ (e.g., German) keyboard. */
  static get KeyY(): string {
    return "KeyY";
  }

  /** z on a US keyboard. Labelled w on an AZERTY (e.g., French) keyboard, and y on a  QWERTZ (e.g., German) keyboard. */
  static get KeyZ(): string {
    return "KeyZ";
  }

  /** -_ on a US keyboard. */
  static get Minus(): string {
    return "Minus";
  }

  /** .> on a US keyboard. */
  static get Period(): string {
    return "Period";
  }

  /** '" on a US keyboard. */
  static get Quote(): string {
    return "Quote";
  }

  /** ;: on a US keyboard. */
  static get Semicolon(): string {
    return "Semicolon";
  }

  /** /? on a US keyboard. */
  static get Slash(): string {
    return "Slash";
  }

  static values(): string[] {
    return [
      "Backquote",
      "Backslash",
      "Backspace",
      "BracketLeft",
      "BracketRight",
      "Comma",
      "Digit0",
      "Digit1",
      "Digit2",
      "Digit3",
      "Digit4",
      "Digit5",
      "Digit6",
      "Digit7",
      "Digit8",
      "Digit9",
      "Equal",
      "IntlBackslash",
      "IntlRo",
      "IntlYen",
      "KeyA",
      "KeyB",
      "KeyC",
      "KeyD",
      "KeyE",
      "KeyF",
      "KeyG",
      "KeyH",
      "KeyI",
      "KeyJ",
      "KeyK",
      "KeyL",
      "KeyM",
      "KeyN",
      "KeyO",
      "KeyP",
      "KeyQ",
      "KeyR",
      "KeyS",
      "KeyT",
      "KeyU",
      "KeyV",
      "KeyW",
      "KeyX",
      "KeyY",
      "KeyZ",
      "Minus",
      "Period",
      "Quote",
      "Semicolon",
      "Slash"
    ];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}

export class AlphanumericFunctionalKeys {
  /** Alt, Option or ⌥. */
  static get AltLeft(): string {
    return "AltLeft";
  }

  /** Alt, Option or ⌥. This is labelled AltGr key on many keyboard layouts. */
  static get AltRight(): string {
    return "AltRight";
  }

  /** CapsLock or ⇪ */
  static get CapsLock(): string {
    return "CapsLock";
  }

  /** The application context menu key, which is typically found between the right Meta key and the right Control key. */
  static get ContextMenu(): string {
    return "ContextMenu";
  }

  /** Control or ⌃ */
  static get ControlLeft(): string {
    return "ControlLeft";
  }

  /** Control or ⌃ */
  static get ControlRight(): string {
    return "ControlRight";
  }

  /** Enter or ↵. Labelled Return on Apple keyboards. */
  static get Enter(): string {
    return "Enter";
  }

  /** The Windows, ⌘, Command or other OS symbol key. */
  static get MetaLeft(): string {
    return "MetaLeft";
  }

  /** The Windows, ⌘, Command or other OS symbol key. */
  static get MetaRight(): string {
    return "MetaRight";
  }

  /** Shift or ⇧ */
  static get ShiftLeft(): string {
    return "ShiftLeft";
  }

  /** Shift or ⇧ */
  static get ShiftRight(): string {
    return "ShiftRight";
  }

  /** (space) */
  static get Space(): string {
    return "Space";
  }

  /** Tab or ⇥ */
  static get Tab(): string {
    return "Tab";
  }

  static values(): string[] {
    return [
      "AltLeft",
      "AltRight",
      "CapsLock",
      "ContextMenu",
      "ControlLeft",
      "ControlRight",
      "Enter",
      "MetaLeft",
      "MetaRight",
      "ShiftLeft",
      "ShiftRight",
      "Space",
      "Tab"
    ];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}

export class ControlPadKeys {
  /** ⌦. The forward delete key. Note that on Apple keyboards, the key labelled Delete on the main part of  the keyboard should be encoded as "Backspace". */
  static get Delete(): string {
    return "Delete";
  }

  /** Page Down, End or ↘ */
  static get End(): string {
    return "End";
  }

  /** Help. Not present on standard PC keyboards. */
  static get Help(): string {
    return "Help";
  }

  /** Home or ↖ */
  static get Home(): string {
    return "Home";
  }

  /** Insert or Ins. Not present on Apple keyboards. */
  static get Insert(): string {
    return "Insert";
  }

  /** Page Down, PgDn or ⇟ */
  static get PageDown(): string {
    return "PageDown";
  }

  /** Page Up, PgUp or ⇞ */
  static get PageUp(): string {
    return "PageUp";
  }

  static values(): string[] {
    return ["Delete", "End", "Help", "Home", "Insert", "PageDown", "PageUp"];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}

export class ArrowPadKeys {
  /** ↓ */
  static get ArrowDown(): string {
    return "ArrowDown";
  }

  /** ← */
  static get ArrowLeft(): string {
    return "ArrowLeft";
  }

  /** → */
  static get ArrowRight(): string {
    return "ArrowRight";
  }

  /** ↑ */
  static get ArrowUp(): string {
    return "ArrowUp";
  }

  static values(): string[] {
    return ["ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp"];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}

export class NumPadKeys {
  /** On the Mac, the "NumLock" code should be used for the numpad Clear key. */
  static get NumLock(): string {
    return "NumLock";
  }

  /** 0 Ins on a keyboard0 on a phone or remote control */
  static get Numpad0(): string {
    return "Numpad0";
  }

  /** 1 End on a keyboard1 or 1 QZ on a phone or remote control */
  static get Numpad1(): string {
    return "Numpad1";
  }

  /** 2 ↓ on a keyboard2 ABC on a phone or remote control */
  static get Numpad2(): string {
    return "Numpad2";
  }

  /** 3 PgDn on a keyboard3 DEF on a phone or remote control */
  static get Numpad3(): string {
    return "Numpad3";
  }

  /** 4 ← on a keyboard4 GHI on a phone or remote control */
  static get Numpad4(): string {
    return "Numpad4";
  }

  /** 5 on a keyboard5 JKL on a phone or remote control */
  static get Numpad5(): string {
    return "Numpad5";
  }

  /** 6 → on a keyboard6 MNO on a phone or remote control */
  static get Numpad6(): string {
    return "Numpad6";
  }

  /** 7 Home on a keyboard7 PQRS or 7 PRS on a phone or remote control */
  static get Numpad7(): string {
    return "Numpad7";
  }

  /** 8 ↑ on a keyboard8 TUV on a phone or remote control */
  static get Numpad8(): string {
    return "Numpad8";
  }

  /** 9 PgUp on a keyboard9 WXYZ or 9 WXY on a phone or remote control */
  static get Numpad9(): string {
    return "Numpad9";
  }

  /** + */
  static get NumpadAdd(): string {
    return "NumpadAdd";
  }

  /** Found on the Microsoft Natural Keyboard. */
  static get NumpadBackspace(): string {
    return "NumpadBackspace";
  }

  /** C or AC (All Clear). Also for use with numpads that have a Clear key that is separate from the NumLock key. On the Mac, the numpad Clear key should always  be encoded as "NumLock". */
  static get NumpadClear(): string {
    return "NumpadClear";
  }

  /** CE (Clear Entry) */
  static get NumpadClearEntry(): string {
    return "NumpadClearEntry";
  }

  /** , (thousands separator). For locales where the thousands separator is a "." (e.g., Brazil), this key may generate a .. */
  static get NumpadComma(): string {
    return "NumpadComma";
  }

  /** . Del. For locales where the decimal separator is "," (e.g., Brazil), this key may generate a ,. */
  static get NumpadDecimal(): string {
    return "NumpadDecimal";
  }

  /** / */
  static get NumpadDivide(): string {
    return "NumpadDivide";
  }

  /**  */
  static get NumpadEnter(): string {
    return "NumpadEnter";
  }

  /** = */
  static get NumpadEqual(): string {
    return "NumpadEqual";
  }

  /** # on a phone or remote control device. This key is typically found below the 9 key and to the right of the 0 key. */
  static get NumpadHash(): string {
    return "NumpadHash";
  }

  /** M+ Add current entry to the value stored in memory. */
  static get NumpadMemoryAdd(): string {
    return "NumpadMemoryAdd";
  }

  /** MC Clear the value stored in memory. */
  static get NumpadMemoryClear(): string {
    return "NumpadMemoryClear";
  }

  /** MR Replace the current entry with the value stored in memory. */
  static get NumpadMemoryRecall(): string {
    return "NumpadMemoryRecall";
  }

  /** MS Replace the value stored in memory with the current entry. */
  static get NumpadMemoryStore(): string {
    return "NumpadMemoryStore";
  }

  /** M- Subtract current entry from the value stored in memory. */
  static get NumpadMemorySubtract(): string {
    return "NumpadMemorySubtract";
  }

  /** * on a keyboard. For use with numpads that provide mathematical operations (+, -, * and /).Use "NumpadStar" for the * key on phones and remote controls. */
  static get NumpadMultiply(): string {
    return "NumpadMultiply";
  }

  /** ( Found on the Microsoft Natural Keyboard. */
  static get NumpadParenLeft(): string {
    return "NumpadParenLeft";
  }

  /** ) Found on the Microsoft Natural Keyboard. */
  static get NumpadParenRight(): string {
    return "NumpadParenRight";
  }

  /** * on a phone or remote control device. This key is typically found below the 7 key and to the left of  the 0 key.Use "NumpadMultiply" for the * key on  numeric keypads. */
  static get NumpadStar(): string {
    return "NumpadStar";
  }

  /** - */
  static get NumpadSubtract(): string {
    return "NumpadSubtract";
  }

  static values(): string[] {
    return [
      "NumLock",
      "Numpad0",
      "Numpad1",
      "Numpad2",
      "Numpad3",
      "Numpad4",
      "Numpad5",
      "Numpad6",
      "Numpad7",
      "Numpad8",
      "Numpad9",
      "NumpadAdd",
      "NumpadBackspace",
      "NumpadClear",
      "NumpadClearEntry",
      "NumpadComma",
      "NumpadDecimal",
      "NumpadDivide",
      "NumpadEnter",
      "NumpadEqual",
      "NumpadHash",
      "NumpadMemoryAdd",
      "NumpadMemoryClear",
      "NumpadMemoryRecall",
      "NumpadMemoryStore",
      "NumpadMemorySubtract",
      "NumpadMultiply",
      "NumpadParenLeft",
      "NumpadParenRight",
      "NumpadStar",
      "NumpadSubtract"
    ];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}

export class FunctionKeys {
  /** Esc or ⎋ */
  static get Escape(): string {
    return "Escape";
  }

  /** F1 */
  static get F1(): string {
    return "F1";
  }

  /** F2 */
  static get F2(): string {
    return "F2";
  }

  /** F3 */
  static get F3(): string {
    return "F3";
  }

  /** F4 */
  static get F4(): string {
    return "F4";
  }

  /** F5 */
  static get F5(): string {
    return "F5";
  }

  /** F6 */
  static get F6(): string {
    return "F6";
  }

  /** F7 */
  static get F7(): string {
    return "F7";
  }

  /** F8 */
  static get F8(): string {
    return "F8";
  }

  /** F9 */
  static get F9(): string {
    return "F9";
  }

  /** F10 */
  static get F10(): string {
    return "F10";
  }

  /** F11 */
  static get F11(): string {
    return "F11";
  }

  /** F12 */
  static get F12(): string {
    return "F12";
  }

  /** Fn This is typically a hardware key that does not generate a separate code. Most keyboards do not place this key in the function section, but it is  included here to keep it with related keys. */
  static get Fn(): string {
    return "Fn";
  }

  /** FLock or FnLock. Function Lock key. Found on the Microsoft Natural Keyboard. */
  static get FnLock(): string {
    return "FnLock";
  }

  /** PrtScr SysRq or Print Screen */
  static get PrintScreen(): string {
    return "PrintScreen";
  }

  /** Scroll Lock */
  static get ScrollLock(): string {
    return "ScrollLock";
  }

  /** Pause Break */
  static get Pause(): string {
    return "Pause";
  }

  static values(): string[] {
    return [
      "Escape",
      "F1",
      "F2",
      "F3",
      "F4",
      "F5",
      "F6",
      "F7",
      "F8",
      "F9",
      "F10",
      "F11",
      "F12",
      "Fn",
      "FnLock",
      "PrintScreen",
      "ScrollLock",
      "Pause"
    ];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}

export class MediaKeys {
  /** Some laptops place this key to the left of the ↑ key. */
  static get BrowserBack(): string {
    return "BrowserBack";
  }

  /**  */
  static get BrowserFavorites(): string {
    return "BrowserFavorites";
  }

  /** Some laptops place this key to the right of the ↑ key. */
  static get BrowserForward(): string {
    return "BrowserForward";
  }

  /**  */
  static get BrowserHome(): string {
    return "BrowserHome";
  }

  /**  */
  static get BrowserRefresh(): string {
    return "BrowserRefresh";
  }

  /**  */
  static get BrowserSearch(): string {
    return "BrowserSearch";
  }

  /**  */
  static get BrowserStop(): string {
    return "BrowserStop";
  }

  /** Eject or ⏏. This key is placed in the function section on some Apple keyboards. */
  static get Eject(): string {
    return "Eject";
  }

  /** Sometimes labelled My Computer on the keyboard */
  static get LaunchApp1(): string {
    return "LaunchApp1";
  }

  /** Sometimes labelled Calculator on the keyboard */
  static get LaunchApp2(): string {
    return "LaunchApp2";
  }

  /**  */
  static get LaunchMail(): string {
    return "LaunchMail";
  }

  /**  */
  static get MediaPlayPause(): string {
    return "MediaPlayPause";
  }

  /**  */
  static get MediaSelect(): string {
    return "MediaSelect";
  }

  /**  */
  static get MediaStop(): string {
    return "MediaStop";
  }

  /**  */
  static get MediaTrackNext(): string {
    return "MediaTrackNext";
  }

  /**  */
  static get MediaTrackPrevious(): string {
    return "MediaTrackPrevious";
  }

  /** This key is placed in the function section on some Apple keyboards, replacing the Eject key. */
  static get Power(): string {
    return "Power";
  }

  /**  */
  static get Sleep(): string {
    return "Sleep";
  }

  /**  */
  static get AudioVolumeDown(): string {
    return "AudioVolumeDown";
  }

  /**  */
  static get AudioVolumeMute(): string {
    return "AudioVolumeMute";
  }

  /**  */
  static get AudioVolumeUp(): string {
    return "AudioVolumeUp";
  }

  /**  */
  static get WakeUp(): string {
    return "WakeUp";
  }

  static values(): string[] {
    return [
      "BrowserBack",
      "BrowserFavorites",
      "BrowserForward",
      "BrowserHome",
      "BrowserRefresh",
      "BrowserSearch",
      "BrowserStop",
      "Eject",
      "LaunchApp1",
      "LaunchApp2",
      "LaunchMail",
      "MediaPlayPause",
      "MediaSelect",
      "MediaStop",
      "MediaTrackNext",
      "MediaTrackPrevious",
      "Power",
      "Sleep",
      "AudioVolumeDown",
      "AudioVolumeMute",
      "AudioVolumeUp",
      "WakeUp"
    ];
  }

  static contains(key: string): boolean {
    return this.values().includes(key);
  }
}
